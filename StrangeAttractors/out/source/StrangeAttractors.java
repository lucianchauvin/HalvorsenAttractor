/* autogenerated by Processing revision 1276 on 2022-04-16 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import org.quark.jasmine.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class StrangeAttractors extends PApplet {



/* 
Current Problems
1. In the attractor class, the eval function for each forumli for demension with repect to time requires manual change for order in variables. 
*/

// General Attractor(x, y, z, xoffset, yoffset, power, noise, step, scale, startColor, endColor, iso, dx, dy,dz);

// Halvorsen
Attractor[] attractors = {new Attractor(1, 0, 0, 0, 0, 1, 0, .005f, 20, 135, 200, true, "-1.4*x-4*y-4*z-y*y", "-1.4*y-4*z-4*x-z*z", "-1.4*z-4*x-4*y-x*x")};

// Lorenze
// Attractor[] attractors = {new Attractor(1, 0, 0, 0, 0, 1, 0, .005, 10, 135, 200, false, "10*(-x+y)", "28*x-y-x*z", "x*y-(8/3)*z")};

 public void setup() {
  /* size commented out by preprocessor */;
  frameRate(1000);
  colorMode(HSB);
  background(0);
  /* smooth commented out by preprocessor */;

}

 public void draw() {
  for(Attractor a: attractors){
    background(0);
    a.update();
    a.drawp();
  }
}
class Attractor { 
  
  ArrayList<PVector> points = new ArrayList<PVector>();
  
  float x, y, z, xoffset, yoffset, power, noise, step, scale, startColor, endColor;
  boolean iso;
  Expression dxe;
  Expression dye; 
  Expression dze;
  String[] dxo;
  String[] dyo;
  String[] dzo;
  
  Attractor (float x, float y, float z, float xoffset, float yoffset, float power, float noise, float step, float scale, float startColor, float endColor, boolean iso, String dx, String dy, String dz) {  
    this.x = x;
    this.y = y;
    this.z = z;
    this.xoffset = xoffset;
    this.yoffset = yoffset;
    this.power = power;
    this.noise = noise;
    this.step = step;
    this.scale = scale;
    this.startColor = startColor;
    this.endColor = endColor;
    this.iso = iso;
    
    Compile.init();
    
    this.dxe = Compile.expression(dx,true);
    this.dye = Compile.expression(dy,true);
    this.dze = Compile.expression(dz,true);
    
    //for(String c: split(dx,"")){
    //  if(c.equals("x") || c.equals("y") || c.equals("z")){
    //    append(dxo, c);
    //  }
    //}
    //for(String c: split(dy,"")){
    //  if(c.equals("x") || c.equals("y") || c.equals("z")){
    //    append(dyo, c);
    //  }
    //}
    //for(String c: split(dz,"")){
    //  if(c.equals("x") || c.equals("y") || c.equals("z")){
    //    append(dzo, c);
    //  }
    //}
  
  }
  
   public float[] toIso(float lx, float ly, float lz) {
    float u = lx * cos(360) + ly * cos(360 + radians(120)) + lz * cos(360 - radians(120));
    float v = lx * sin(360) + ly * sin(360 + radians(120)) + lz * sin(360 - radians(120));
    return new float[] {u,v};
  }
  
   public void update(){
    print("|", x, y, z, "|", "\n");
    float dxdt = dxe.eval(x,y,z).answer().toFloat()*step;
    float dydt = dye.eval(x,y,z).answer().toFloat()*step;
    float dzdt = dze.eval(x,y,z).answer().toFloat()*step;
    //print("|", dxdt, dydt, dzdt, "|", "\n");
    
    x += dxdt;
    y += dydt;
    z += dzdt;
    
    points.add(new PVector(x, y, z));
  }
  
   public void drawp(){
    translate(displayWidth/2 + xoffset, displayHeight/2 + yoffset, 0);
    stroke(255);
    noFill();
    
    float hu = startColor;
    float c = 1; 
    
    beginShape();
    for (int i = 0; i < points.size(); i++) {
      stroke(hu, 255, i);
      strokeWeight(i/75);
      if(iso){
        float u = toIso(points.get(i).x,points.get(i).y,points.get(i).z)[0];
        float v = toIso(points.get(i).x,points.get(i).y,points.get(i).z)[1];
        vertex(u*scale + random(noise), v*scale + random(noise), 0);
      }
      else{
        vertex(points.get(i).x*scale + random(noise), points.get(i).y*scale + random(noise), points.get(i).z*scale + random(noise));
      }
      hu += .4f*c;
      if (hu > endColor) {
        c = -1;
      }
      if (hu < startColor) {
        c = 1;
      }
      if (points.size() > 255) {
        points.remove(0);
      }
    }
    endShape();
  }
} 


  public void settings() { size(displayWidth, displayHeight, P3D);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "StrangeAttractors" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
